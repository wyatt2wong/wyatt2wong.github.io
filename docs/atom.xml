<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Wyatt Wong&#39;s Labs</title>
  
  <subtitle>宁静致远</subtitle>
  <link href="https://wyatt2wong.github.io/atom.xml" rel="self"/>
  
  <link href="https://wyatt2wong.github.io/"/>
  <updated>2025-07-15T13:28:34.354Z</updated>
  <id>https://wyatt2wong.github.io/</id>
  
  <author>
    <name>Wyatt Wong</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>AspectJ在Gradle的CTW案例</title>
    <link href="https://wyatt2wong.github.io/2025/07/15/gradle-aspectj-ctw/"/>
    <id>https://wyatt2wong.github.io/2025/07/15/gradle-aspectj-ctw/</id>
    <published>2025-07-15T09:49:30.074Z</published>
    <updated>2025-07-15T13:28:34.354Z</updated>
    
    <content type="html"><![CDATA[<p><code>AspectJ</code>的运行方式主要有三种：  </p><ol><li><strong>CTW(Compile Time Weaving)</strong><blockquote><p>编译时织入，依托 <code>构建工具(maven/gradle等)</code> 和 <code>AJC(AspectJ Compiler)</code>，在项目编译时修改字节码</p></blockquote></li><li><strong>LTW(Load Time Weaving)</strong><blockquote><p>加载时织入，依托 <code>Java Agent</code> 机制，在 <code>ClassLoader</code> 加载类时修改字节码</p></blockquote></li><li><strong>RTW(Run Time Weaving)</strong><blockquote><p>运行时织入，依托 <code>JDK代理</code>、<code>CGLIB</code> 等代理机制，在运行时动态修改字节码</p></blockquote></li></ol><hr><p>以下主要记录 <code>LTW</code> 方式下的组合：<strong>Gradle+AJC</strong> </p><h1 id="Gradle配置"><a href="#Gradle配置" class="headerlink" title="Gradle配置"></a>Gradle配置</h1><p>在项目 <code>settings.gradle</code> 中配置，统一管理该插件版本</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">    id <span class="string">&#x27;io.freefair.settings.plugin-versions&#x27;</span> version <span class="string">&#x27;版本&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在项目根目录 <code>build.gradle</code> 中配置</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">buildscript &#123;</span><br><span class="line">    dependencies &#123;</span><br><span class="line">        classpath <span class="string">&quot;org.aspectj:aspectjtools:版本&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着在 <code>项目/模块</code> 的 <code>build.gradle</code> 中配置</p><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">    id <span class="string">&quot;io.freefair.aspectj.post-compile-weaving&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Idea配置"><a href="#Idea配置" class="headerlink" title="Idea配置"></a>Idea配置</h1><ol><li>安装Idea插件 <code>AspectJ</code></li><li>在Idea菜单<code>Project Structure</code> (即<code>项目结构</code>) &gt;<code>Facet</code> 中，添加 <code>AspectJ</code> 并选择对应模块</li></ol><h1 id="注解式切面"><a href="#注解式切面" class="headerlink" title="注解式切面"></a>注解式切面</h1><p>与spring aop的使用方式类似</p><blockquote><p>如 <code>@Around</code>、<code>@Before</code>、<code>@After</code>、<code>@Pointcut</code>、<code>@AfterReturning</code>、<code>@AfterThrowing</code> 等</p></blockquote><p>主要不同点</p><ol><li><strong>切面顺序</strong></li></ol><ul><li>同一Aspect类有多个 <code>PointCut</code> 时，按定义的顺序  </li><li>不同Aspect类有同一连结点时，顺序随机，除非在Aspect类中声明<code>Declare Precedence</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.aa;</span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@DeclarePrecedence(&quot;com.aa.AspectA,com.bb.AspectB&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AspectA</span> &#123; ... &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.bb;</span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@DeclarePrecedence(&quot;com.bb.AspectB,com.cc.AspectC&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AspectB</span> &#123; ... &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.cc;</span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AspectC</span> &#123; ... &#125;</span><br></pre></td></tr></table></figure><p>上述三个切面的执行顺序为：<code>A &gt; B &gt; C</code></p><ol start="2"><li><strong>切面作用域</strong><br>默认为<code>切面静态单例</code>，可选 <code>perthis</code> 和 <code>pertarget</code></li></ol><ul><li><strong>singleton</strong><blockquote><p>每个 <code>切面类</code> 有一个 <code>切面实例</code></p><blockquote><p>注意！此时在spring中配置@Bean时，不能用<code>new 切面类()</code>，而是 <code>Aspects.aspectOf(切面类.class)</code></p></blockquote></blockquote></li><li><strong>perthis</strong><blockquote><p>每个 <code>目标实例</code> 有一个 <code>切面实例</code>，<code>切面实例</code> 随着 <code>目标实例</code> 的 创建而创建、GC回收而回收</p></blockquote></li><li><strong>pertarget</strong><blockquote><p>每个 <code>目标类</code> 各有一个 <code>切面实例</code>，同一 <code>目标类</code> 的 <code>多个实例</code>共用该类的<code>切面实例</code></p></blockquote></li></ul><hr><h1 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h1><p><a href="https://docs.freefair.io/gradle-plugins/8.14/reference/#_aspectj" title="Freefair Gradle Plugin 8.14 Document">Freefair Gradle Plugin 8.14 Document</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;code&gt;AspectJ&lt;/code&gt;的运行方式主要有三种：  &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;CTW(Compile Time Weaving)&lt;/strong&gt;&lt;blockquote&gt;
&lt;p&gt;编译时织入，依托 &lt;code&gt;构建工具(maven/gradle</summary>
      
    
    
    
    <category term="java" scheme="https://wyatt2wong.github.io/categories/java/"/>
    
    
  </entry>
  
  <entry>
    <title>背包算法：01、完全</title>
    <link href="https://wyatt2wong.github.io/2025/06/19/knapsack/"/>
    <id>https://wyatt2wong.github.io/2025/06/19/knapsack/</id>
    <published>2025-06-19T06:00:30.871Z</published>
    <updated>2025-07-15T13:21:50.665Z</updated>
    
    <content type="html"><![CDATA[<p>待有空补充</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;待有空补充&lt;/p&gt;
</summary>
      
    
    
    
    <category term="算法&amp;数据结构" scheme="https://wyatt2wong.github.io/categories/alg-ds/"/>
    
    
  </entry>
  
</feed>
